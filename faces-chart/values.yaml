# Default values for Faces.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Default image tag. This is used only if images aren't set in the sections
# below.
defaultImageTag: ""             # If not set, uses the appVersion

# Default imagePullPolicy. This is used only if not set in the sections below.
defaultImagePullPolicy: IfNotPresent

# Default replica count. This is used only if not set in the sections below.
defaultReplicas: 1

# User auth header.
authHeader: "X-Faces-User"

# Whisper address. If set, enables Whisper integration in all services.
whisperAddress: ""
# Whisper node number. Only needed if multiple nodes of a service are run.
whisperNode: 1

gui:
  image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-gui
  imageTag: ""                  # If not set, uses the defaultImageTag
  imagePullPolicy: ""           # If not set, uses the default imagePullPolicy
  serviceType: ClusterIP        # Override with LoadBalancer or NodePort if desired

face:
  image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-face
  imageTag: ""                  # If not set, uses the defaultImageTag
  imagePullPolicy: ""           # If not set, uses the default imagePullPolicy
  errorFraction: "20"
  delayBuckets: ""
  # smileyService: smiley         # Override if desired
  # colorService: color           # Override if desired

ingress:
  enabled: False                # If set to True, enables the ingress workload
  image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-ingress
  imageTag: ""                  # If not set, uses the defaultImageTag
  imagePullPolicy: ""           # If not set, uses the default imagePullPolicy
  cellService: "cell"           # Override if desired

backend:
  image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ""
  imageTag: ""                  # If not set, uses the defaultImageTag
  imagePullPolicy: ""           # If not set, uses the default imagePullPolicy
  errorFraction: "20"
  delayBuckets: "0,5,10,15,20,50,200,500,1500"

smiley:
  enabled: True                   # If set to True, enables the second smiley workload
  smiley: ""                      # Override if desired
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-smiley
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

  # If argo rollouts is enabled with canary and to create route automatically 
  route:
    kind: HTTPRoute
    name: smiley-route

smiley2:
  enabled: False                  # If set to True, enables the second smiley workload
  smiley: "HeartEyes"            # Override if desired
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-smiley
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

smiley3:
  enabled: False                  # If set to True, enables the second smiley workload
  smiley: "RollingEyes"           # Override if desired
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-smiley
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

color:
  enabled: True                   # If set to True, enables the second smiley workload
  color: ""                       # Override if desired, defaults to colorblind-friendly light blue from the Tol palette
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-color
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

  # If argo rollouts is enabled with canary and to create route automatically 
  route:
    kind: GRPCRoute
    name: color-route

color2:
  enabled: False                  # If set to True, enables the second color workload
  color: "green"                  # Override if desired, defaults to colorblind-friendly green from the Tol palette
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-color
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

color3:
  enabled: False                  # If set to True, enables the second color workload
  color: "darkblue"               # Override if desired, defaults to colorblind-friendly green from the Tol palette
  # image: ""                     # If set, overrides the imageName/imageTag pair
  imageName: ghcr.io/buoyantio/faces-color
  # imageTag: ""                  # If not set, uses backend.imageTag
  # imagePullPolicy: ""           # If not set, uses backend.imagePullPolicy
  # errorFraction: ""             # If not set, uses backend.errorFraction
  # delayBuckets: ""              # If not set, uses backend.delayBuckets

# --- Argo Rollouts switch & common options ---
rollouts:
  # when true, render Rollout instead of Deployment
  enabled: false           

  # Choose one: "canary" or "blueGreen"
  strategy: canary

  # Common pod rollout knobs (work for both strategies)
  maxSurge: 1
  maxUnavailable: 0
  revisionHistoryLimit: 5
  progressDeadlineSeconds: 600
  minReadySeconds: 0

  # Canary options
  canary:
    # If you do traffic shifting with Linkerd, Argo will manage a TrafficSplit.
    # If you don't want traffic shifting, leave trafficRouting null and it behaves like controlled rolling update.
    trafficRouting:
      # Option A: built-in provider (example: smi | nginx | alb | gateway | null). Leave null/empty if using plugin.
      provider: null

      # Option B: plugin-based traffic routing
      plugin:
        name: "argoproj-labs/gatewayAPI"             # e.g., "argoproj-labs/gatewayAPI"
        autocreateRoutes: true                       # if true, chart creates routes & fills plugin config automatically
        config: {}                                   # arbitrary key/values, e.g. { httpRoute: argo-rollouts-http-route, namespace: test }
    steps:
      - setWeight: 10
      - pause: { duration: 30 }
      - setWeight: 20
      - pause: { duration: 30 }
      - setWeight: 50
      - pause: { duration: 30 }
      - setWeight: 70
      - pause: { duration: 60 }
      - setWeight: 100
    # Service names (stable stays the original; canary gets a -canary suffix)
    serviceSuffix:
      canary: "-canary"

  # Blue/Green options
  blueGreen:
    autoPromotionEnabled: false
    autoPromotionSeconds: null
    # Service names (active stays the original; preview gets a -preview suffix)
    serviceSuffix:
      preview: "-preview"

